import time
from pprint import pprint
import requests
import json

APP_ID = 6984843
BASE_URL = 'https://oauth.vk.com/authorize'
auth_data = {
    'client_id': APP_ID,
    'display': 'page',
    'response_type': 'token',
    'scope': 'friends',
    'v': '5.95',
}

vk_id1 = '171691064'  # 171691064 eshmargunov

TOKEN = ''  # из задания

params = {
    'access_token': TOKEN,
    'v': '5.95'
}


class User:
    def __init__(self, token, id_vk_user=None):
        self.token = token
        self.id_vk = id_vk_user

    def get_params(self):
        return dict(access_token=self.token, v='5.95')

    def get_friends_list(self, id_target):
        params = self.get_params()
        params['user_id'] = id_target
        params['order'] = 'hints'
        # params['count'] =
        # params['fields'] =
        response = requests.get('https://api.vk.com/method/friends.get', params)
        # pprint(response.json())
        return response.json()

    def get_groups(self, user_id):
        params['user_id'] = user_id
        params['extended'] = '1'
        params['fields'] = 'id,name,members_count'
        
        response = requests.get('https://api.vk.com/method/groups.get', params)
        # pprint(response.json())
        return response.json()

    def get_groups_fields(self, user_id):
        params['user_id'] = user_id
        params['extended'] = '1'
        params['fields'] = 'id,name,members_count'
        # user_id = vk_id1
        response = requests.get('https://api.vk.com/method/groups.get', params)
        # pprint(response.json())
        return response.json()


user1 = User(TOKEN, vk_id1)

friends_target = user1.get_friends_list(vk_id1)['response']['items']  # получаем список id друзей таргета
groups_target = user1.get_groups(vk_id1)['response']['items']  # получаем список груп таргета
# print(len(friends_target))
# print(groups_target)
# =======
collect_group = []


def collector():  # проход по всем друзьям и сбор групп + исключение друзей у которых нет доступа к группам
    counter_of_steps = 1
    for groups_of_freinds in friends_target:
        try:
            collect_group.append(user1.get_groups(groups_of_freinds)['response']['items'])
            print('- друг № {} из {}'.format(counter_of_steps, len(friends_target)))
            counter_of_steps += 1
            time.sleep(0.5)
        except KeyError:
            counter_of_steps += 1
            print('ошибка доступа к другу № {} из {}'.format(counter_of_steps, len(friends_target)))
    return collect_group  # возвращает слепленный список групп всех друзей


collector()
# pprint(collect_group)

for unic in groups_target:  # чистим список от не уникальных групп
    if unic in collect_group:
        groups_target.remove(unic)
# print(groups_target)

groups_target_fields = user1.get_groups_fields(vk_id1)
num_g = 0
dict_fields = {}
form_list = []
bufer = {}
# pprint(groups_target_fields)

while num_g < int(groups_target_fields['response']['count']):
    dict_fields['name'] = groups_target_fields['response']['items'][num_g]['name']
    dict_fields['gid'] = groups_target_fields['response']['items'][num_g]['id']
    dict_fields['members_count'] = groups_target_fields['response']['items'][num_g]['members_count']
    # print(dict_fields)
    # была странная проблема, без буфера, лист заполнялся одинаковыми значениями и перезаписывался
    #  т.е. на 3 ем шаге в нем было 3 одинаковых словаря из 3его шага, на последнем все словари с последнего
    bufer = dict_fields.copy()
    form_list.append(bufer)
    num_g += 1
    # print(form_list)
pprint(form_list)
for item_in in form_list:
    if item_in['gid'] not in groups_target:
        form_list.remove(item_in)

# пишем dict_fields  в groups.json
with open("groups.json", 'w', encoding='utf-8') as write_file:
    json.dump(form_list, write_file, indent=4, ensure_ascii=False)
